package com.designpatterns.creational.builder;

import com.designpatterns.creational.builder.builders.StandardProductBuilder;
import com.designpatterns.creational.builder.builders.PremiumProductBuilder;
import com.designpatterns.creational.builder.products.StandardProduct;
import com.designpatterns.creational.builder.products.PremiumProduct;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

/**
 * BuilderPatternTest - Comprehensive test suite for Builder pattern implementation
 * Tests all aspects including validation, fluent interface, director usage, and edge cases
 */
public class BuilderPatternTest {
    
    private StandardProductBuilder standardBuilder;
    private PremiumProductBuilder premiumBuilder;
    private ProductDirector director;
    
    @BeforeEach
    void setUp() {
        standardBuilder = new StandardProductBuilder();
        premiumBuilder = new PremiumProductBuilder();
        director = new ProductDirector();
    }
    
    @Test
    @DisplayName("Should create standard product with all fields")
    void testStandardProductCreation() {
        Product product = standardBuilder
            .setName("Test Product")
            .setPrice(99.99)
            .setDescription("Test description")
            .setCategory("Test Category")
            .addTag("tag1")
            .addTag("tag2")
            .setFeatured(true)
            .setInventory(50)
            .setSeoSlug("test-product")
            .build();
        
        assertNotNull(product);
        assertEquals("Test Product", product.getName());
        assertEquals(99.99, product.getPrice(), 0.01);
        assertEquals("Test description", product.getDescription());
        assertEquals(2, product.getTags().size());
        assertTrue(product.getTags().contains("tag1"));
        assertTrue(product.getTags().contains("tag2"));
        
        // Test that it's actually a StandardProduct
        assertTrue(product instanceof StandardProduct);
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("Test Category", standardProduct.getCategory());
        assertEquals(50, standardProduct.getInventory());
        assertEquals("test-product", standardProduct.getSeoSlug());
    }
    
    @Test
    @DisplayName("Should create premium product with extended features")
    void testPremiumProductCreation() {
        Product product = premiumBuilder
            .setName("Premium Product")
            .setPrice(299.99)
            .setDescription("Premium description")
            .setCategory("Premium Category")
            .addTag("premium")
            .setFeatured(true)
            .setInventory(25)
            .setSeoSlug("premium-product")
            .setWarrantyMonths(24)
            .setSupportLevel("Premium")
            .build();
        
        assertNotNull(product);
        assertEquals("Premium Product", product.getName());
        assertEquals(299.99, product.getPrice(), 0.01);
        
        // Test that it's actually a PremiumProduct
        assertTrue(product instanceof PremiumProduct);
        PremiumProduct premiumProduct = (PremiumProduct) product;
        assertEquals("Premium Category", premiumProduct.getCategory());
        assertEquals(25, premiumProduct.getInventory());
        assertEquals("premium-product", premiumProduct.getSeoSlug());
        assertEquals(24, premiumProduct.getWarrantyMonths());
        assertEquals("Premium", premiumProduct.getSupportLevel());
    }
    
    @Test
    @DisplayName("Should validate required fields")
    void testValidationRequiredFields() {
        // Test missing name
        assertThrows(IllegalStateException.class, () -> {
            standardBuilder.setPrice(99.99).build();
        });
        
        // Test empty name
        assertThrows(IllegalStateException.class, () -> {
            standardBuilder.setName("").setPrice(99.99).build();
        });
        
        // Test negative price
        assertThrows(IllegalStateException.class, () -> {
            standardBuilder.setName("Test").setPrice(-10.0).build();
        });
    }
    
    @Test
    @DisplayName("Should auto-generate SEO slug when not provided")
    void testAutoGeneratedSeoSlug() {
        Product product = standardBuilder
            .setName("Test Product Name")
            .setPrice(99.99)
            .build();
        
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("test-product-name", standardProduct.getSeoSlug());
    }
    
    @Test
    @DisplayName("Should support fluent interface method chaining")
    void testFluentInterface() {
        // This test verifies that all methods return the builder instance
        // enabling method chaining
        Product product = standardBuilder
            .setName("Fluent Test")
            .setPrice(50.0)
            .setDescription("Testing fluent interface")
            .setCategory("Test")
            .addTag("fluent")
            .addTag("test")
            .setFeatured(false)
            .setInventory(100)
            .setSeoSlug("fluent-test")
            .build();
        
        assertNotNull(product);
        assertEquals("Fluent Test", product.getName());
        assertEquals(2, product.getTags().size());
    }
    
    @Test
    @DisplayName("Should create immutable products")
    void testProductImmutability() {
        Product product = standardBuilder
            .setName("Immutable Test")
            .setPrice(75.0)
            .addTag("original")
            .build();
        
        // Get tags and try to modify them
        var tags = product.getTags();
        tags.add("modified");
        
        // Original product should remain unchanged
        var originalTags = product.getTags();
        assertEquals(1, originalTags.size());
        assertTrue(originalTags.contains("original"));
        assertFalse(originalTags.contains("modified"));
    }
    
    @Test
    @DisplayName("Should support builder reuse with reset")
    void testBuilderReuse() {
        // Create first product
        Product product1 = standardBuilder
            .setName("Product 1")
            .setPrice(100.0)
            .addTag("tag1")
            .setFeatured(true)
            .build();
        
        // Reset and create second product
        Product product2 = standardBuilder
            .reset()
            .setName("Product 2")
            .setPrice(200.0)
            .addTag("tag2")
            .setFeatured(false)
            .build();
        
        // Verify both products are different
        assertEquals("Product 1", product1.getName());
        assertEquals("Product 2", product2.getName());
        assertEquals(100.0, product1.getPrice(), 0.01);
        assertEquals(200.0, product2.getPrice(), 0.01);

    }
    
    @Test
    @DisplayName("Should create basic product using director")
    void testDirectorBasicProduct() {
        Product product = director.createBasicProduct(
            new StandardProductBuilder(), 
            "Director Basic", 
            25.0
        );
        
        assertNotNull(product);
        assertEquals("Director Basic", product.getName());
        assertEquals(25.0, product.getPrice(), 0.01);
        assertEquals("Basic product description", product.getDescription());
        
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("General", standardProduct.getCategory());
        assertEquals(10, standardProduct.getInventory());
    }
    
    @Test
    @DisplayName("Should create featured product using director")
    void testDirectorFeaturedProduct() {
        Product product = director.createFeaturedProduct(
            new StandardProductBuilder(),
            "Director Featured",
            150.0,
            "Custom featured description"
        );
        
        assertNotNull(product);
        assertEquals("Director Featured", product.getName());
        assertEquals(150.0, product.getPrice(), 0.01);
        assertEquals("Custom featured description", product.getDescription());
        
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("Featured", standardProduct.getCategory());
        assertEquals(50, standardProduct.getInventory());
        assertTrue(standardProduct.getTags().contains("bestseller"));
        assertTrue(standardProduct.getTags().contains("featured"));
    }
    
    @Test
    @DisplayName("Should create gaming product using director")
    void testDirectorGamingProduct() {
        Product product = director.createGamingProduct(
            new StandardProductBuilder(),
            "Gaming Product",
            299.0,
            "Gaming description"
        );
        
        assertNotNull(product);
        assertEquals("Gaming Product", product.getName());
        
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("Gaming", standardProduct.getCategory());
        assertEquals(25, standardProduct.getInventory());
        assertTrue(standardProduct.getTags().contains("gaming"));
        assertTrue(standardProduct.getTags().contains("high-performance"));
        assertTrue(standardProduct.getTags().contains("rgb"));
    }
    
    @Test
    @DisplayName("Should create premium product using director")
    void testDirectorPremiumProduct() {
        Product product = director.createPremiumProduct(
            new PremiumProductBuilder(),
            "Premium Product",
            599.0,
            "Premium description"
        );
        
        assertNotNull(product);
        assertEquals("Premium Product", product.getName());
        
        PremiumProduct premiumProduct = (PremiumProduct) product;
        assertEquals("Premium", premiumProduct.getCategory());
        assertEquals(15, premiumProduct.getInventory());
        assertEquals(36, premiumProduct.getWarrantyMonths());
        assertEquals("Premium", premiumProduct.getSupportLevel());
        assertTrue(premiumProduct.getTags().contains("premium"));
        assertTrue(premiumProduct.getTags().contains("professional"));
    }
    
    @Test
    @DisplayName("Should create business product using director")
    void testDirectorBusinessProduct() {
        Product product = director.createBusinessProduct(
            new StandardProductBuilder(),
            "Business Product",
            799.0,
            "Business description"
        );
        
        assertNotNull(product);
        assertEquals("Business Product", product.getName());

        
        StandardProduct standardProduct = (StandardProduct) product;
        assertEquals("Business", standardProduct.getCategory());
        assertEquals(100, standardProduct.getInventory()); // High inventory for business
        assertTrue(standardProduct.getTags().contains("business"));
        assertTrue(standardProduct.getTags().contains("enterprise"));
        assertTrue(standardProduct.getTags().contains("productivity"));
    }
    
    @Test
    @DisplayName("Should handle premium builder reset correctly")
    void testPremiumBuilderReset() {
        // Create first premium product
        Product product1 = premiumBuilder
            .setName("Premium 1")
            .setPrice(500.0)
            .setWarrantyMonths(36)
            .setSupportLevel("Premium")
            .build();
        
        // Reset and create second premium product
        Product product2 = ((PremiumProductBuilder) premiumBuilder.reset())
            .setName("Premium 2")
            .setPrice(600.0)
            .build(); // Should use default warranty and support
        
        PremiumProduct premium1 = (PremiumProduct) product1;
        PremiumProduct premium2 = (PremiumProduct) product2;
        
        assertEquals(36, premium1.getWarrantyMonths());
        assertEquals("Premium", premium1.getSupportLevel());
        
        assertEquals(12, premium2.getWarrantyMonths()); // Default value
        assertEquals("Standard", premium2.getSupportLevel()); // Default value
    }
    
    @Test
    @DisplayName("Should demonstrate complete builder pattern workflow")
    void testCompleteWorkflow() {
        System.out.println("\n=== Builder Pattern Test Output ===");
        
        // Create products using different approaches
        Product laptop = new StandardProductBuilder()
            .setName("Gaming Laptop Pro")
            .setPrice(1299.99)
            .setDescription("High-performance gaming laptop with RTX 4070")
            .setCategory("Electronics")
            .addTag("gaming")
            .addTag("laptop")
            .addTag("high-performance")
            .setFeatured(true)
            .setInventory(25)
            .setSeoSlug("gaming-laptop-pro-rtx4070")
            .build();
        
        Product premiumHeadset = director.createPremiumProduct(
            new PremiumProductBuilder(),
            "Professional Gaming Headset",
            299.99,
            "Premium gaming headset with 7.1 surround sound"
        );
        
        // Display products (removed displayProduct calls since interface simplified)
        
        // Verify they were created correctly
        assertEquals("Gaming Laptop Pro", laptop.getName());
        assertEquals("Professional Gaming Headset", premiumHeadset.getName());

        
        System.out.println("=== Builder Pattern Test Complete ===\n");
    }
} 